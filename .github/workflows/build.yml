name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x64 builds
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
            mingw: false
            platform: linux
            build-type: Release
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
            mingw: false
            platform: linux
            build-type: Debug
          # Linux ARM64 builds
          - os: ubuntu-22.04-arm
            cc: gcc
            cxx: g++
            mingw: false
            platform: linux-arm64
            build-type: Release
          - os: ubuntu-22.04-arm
            cc: gcc
            cxx: g++
            mingw: false
            platform: linux-arm64
            build-type: Debug
          # Windows builds (cross-compiled on Linux)
          - os: ubuntu-latest
            cc: x86_64-w64-mingw32-gcc
            cxx: x86_64-w64-mingw32-g++
            mingw: true
            platform: windows
            build-type: Release
          - os: ubuntu-latest
            cc: x86_64-w64-mingw32-gcc
            cxx: x86_64-w64-mingw32-g++
            mingw: true
            platform: windows
            build-type: Debug
          # macOS Intel builds
          - os: macos-13
            cc: clang
            cxx: clang++
            mingw: false
            platform: macos-intel
            build-type: Release
          - os: macos-13
            cc: clang
            cxx: clang++
            mingw: false
            platform: macos-intel
            build-type: Debug
          # macOS ARM64 builds
          - os: macos-latest
            cc: clang
            cxx: clang++
            mingw: false
            platform: macos-arm64
            build-type: Release
          - os: macos-latest
            cc: clang
            cxx: clang++
            mingw: false
            platform: macos-arm64
            build-type: Debug
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install MinGW
        if: matrix.mingw == true
        uses: egor-tensin/setup-mingw@v2.2.0
        with:
          cc: 0

      - name: Cache godot-cpp
        id: cache-godot
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/godot-cpp/gdextension
            ${{ github.workspace }}/godot-cpp/include
            ${{ github.workspace }}/custom-godotcpp-build
          key: ${{ matrix.cc }}-${{ hashFiles('.gitmodules') }}-${{ matrix.build-type }}-${{ matrix.os }}

      - name: Update submodules
        if: steps.cache-godot.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Build godot-cpp
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.mingw != true
        uses: ashutoshvarma/action-cmake-build@master
        with:
          source-dir: ${{ github.workspace }}/custom-godotcpp-build
          build-dir: ${{ github.workspace }}/custom-godotcpp-build
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          configure-options: -G Ninja ${{ matrix.platform == 'macos-arm64' && '-DCMAKE_OSX_ARCHITECTURES=arm64' || '' }}
          build-type: ${{ matrix.build-type }}

      - name: Build godot-cpp MinGW
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.mingw == true
        uses: ashutoshvarma/action-cmake-build@master
        with:
          source-dir: ${{ github.workspace }}/custom-godotcpp-build
          build-dir: ${{ github.workspace }}/custom-godotcpp-build
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          configure-options: -DGENERATE_DEBUG_SYMBOLS=OFF -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_FIND_ROOT_PATH=/usr/x86_64-w64-mingw32 -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -G Ninja
          build-type: ${{ matrix.build-type }}

      - name: Build with CMake
        if: matrix.mingw != true
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          configure-options: -G Ninja ${{ matrix.platform == 'macos-arm64' && '-DCMAKE_OSX_ARCHITECTURES=arm64' || '' }}
          build-type: ${{ matrix.build-type }}

      - name: Build with CMake MinGW
        if: matrix.mingw == true
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          configure-options: -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_FIND_ROOT_PATH=/usr/x86_64-w64-mingw32 -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -G Ninja
          build-type: ${{ matrix.build-type }}

      - name: Upload Built Library Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/addons/godot-openmpt/bin/*
          name: bin-${{ matrix.platform }}-${{ matrix.build-type }}

  fuse-macos-binaries:
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download macOS Intel Debug
        uses: actions/download-artifact@v4
        with:
          name: bin-macos-intel-Debug
          path: ${{ github.workspace }}/temp/intel-debug

      - name: Download macOS ARM64 Debug
        uses: actions/download-artifact@v4
        with:
          name: bin-macos-arm64-Debug
          path: ${{ github.workspace }}/temp/arm64-debug

      - name: Download macOS Intel Release
        uses: actions/download-artifact@v4
        with:
          name: bin-macos-intel-Release
          path: ${{ github.workspace }}/temp/intel-release

      - name: Download macOS ARM64 Release
        uses: actions/download-artifact@v4
        with:
          name: bin-macos-arm64-Release
          path: ${{ github.workspace }}/temp/arm64-release

      - name: Fix individual binaries before lipo
        run: |
          # Function to fix a single binary
          fix_binary() {
            local dylib_path="$1"
            local dylib_name=$(basename "$dylib_path")

            if [ ! -f "$dylib_path" ]; then
              echo "Binary not found: $dylib_path"
              return 1
            fi

            echo "=== Fixing $dylib_name ==="

            # Debug info before fix
            echo "Before fix:"
            otool -D "$dylib_path" | tail -n 1

            # Fix install name to use @loader_path
            local expected_id="@loader_path/$(basename "$dylib_path" | sed 's/darwin\.[^.]*\./darwin./')"
            install_name_tool -id "$expected_id" "$dylib_path"

            # Remove problematic rpaths
            local build_rpath="/Users/runner/work/godot-openmpt/godot-openmpt/custom-godotcpp-build/bin"
            if otool -l "$dylib_path" | grep -q "$build_rpath"; then
              install_name_tool -delete_rpath "$build_rpath" "$dylib_path" 2>/dev/null || true
            fi

            # Fix any problematic dependencies
            otool -L "$dylib_path" | tail -n +2 | awk '{print $1}' | while read dep; do
              if [[ "$dep" == *"custom-godotcpp-build"* ]]; then
                new_dep="@loader_path/$(basename "$dep")"
                install_name_tool -change "$dep" "$new_dep" "$dylib_path" 2>/dev/null || true
              fi
            done

            # Debug info after fix
            echo "After fix:"
            otool -D "$dylib_path" | tail -n 1
            echo "Dependencies:"
            otool -L "$dylib_path" | head -5
            echo ""
          }

          # Fix all individual binaries
          fix_binary "${{ github.workspace }}/temp/intel-debug/libgdmpt-darwin.debug.64.dylib"
          fix_binary "${{ github.workspace }}/temp/arm64-debug/libgdmpt-darwin.debug.arm64.dylib"
          fix_binary "${{ github.workspace }}/temp/intel-release/libgdmpt-darwin.release.64.dylib"
          fix_binary "${{ github.workspace }}/temp/arm64-release/libgdmpt-darwin.release.arm64.dylib"

      - name: Create universal binaries with lipo
        run: |
          mkdir -p ${{ github.workspace }}/addons/godot-openmpt/bin

          # Create universal debug binary
          echo "=== Creating Universal Debug Binary ==="
          lipo -create \
            ${{ github.workspace }}/temp/intel-debug/libgdmpt-darwin.debug.64.dylib \
            ${{ github.workspace }}/temp/arm64-debug/libgdmpt-darwin.debug.arm64.dylib \
            -output ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.debug.universal.dylib

          # Create universal release binary
          echo "=== Creating Universal Release Binary ==="
          lipo -create \
            ${{ github.workspace }}/temp/intel-release/libgdmpt-darwin.release.64.dylib \
            ${{ github.workspace }}/temp/arm64-release/libgdmpt-darwin.release.arm64.dylib \
            -output ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.release.universal.dylib

          # Verify the universal binaries
          echo "=== Universal Debug Binary Info ==="
          file ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.debug.universal.dylib
          lipo -info ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.debug.universal.dylib
          otool -D ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.debug.universal.dylib
          otool -L ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.debug.universal.dylib | head -5

          echo "=== Universal Release Binary Info ==="
          file ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.release.universal.dylib
          lipo -info ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.release.universal.dylib
          otool -D ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.release.universal.dylib
          otool -L ${{ github.workspace }}/addons/godot-openmpt/bin/libgdmpt-darwin.release.universal.dylib | head -5

      - name: Upload universal macOS binaries
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/addons/godot-openmpt/bin/*
          name: bin-macos-universal

  package:
    runs-on: ubuntu-latest
    needs: [build, fuse-macos-binaries]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Linux Debug
        uses: actions/download-artifact@v4
        continue-on-error: ${{ env.ACT && 'true' || 'false' }}
        with:
          name: bin-linux-Debug
          path: ${{ github.workspace }}/addons/godot-openmpt/bin

      - name: Extract Linux ARM64 Debug
        uses: actions/download-artifact@v4
        continue-on-error: ${{ env.ACT && 'true' || 'false' }}
        with:
          name: bin-linux-arm64-Debug
          path: ${{ github.workspace }}/addons/godot-openmpt/bin

      - name: Extract Windows Debug
        uses: actions/download-artifact@v4
        continue-on-error: ${{ env.ACT && 'true' || 'false' }}
        with:
          name: bin-windows-Debug
          path: ${{ github.workspace }}/addons/godot-openmpt/bin

      - name: Extract macOS Universal binaries
        uses: actions/download-artifact@v4
        continue-on-error: ${{ env.ACT && 'true' || 'false' }}
        with:
          name: bin-macos-universal
          path: ${{ github.workspace }}/addons/godot-openmpt/bin

      - name: Extract Linux Release
        uses: actions/download-artifact@v4
        continue-on-error: ${{ env.ACT && 'true' || 'false' }}
        with:
          name: bin-linux-Release
          path: ${{ github.workspace }}/addons/godot-openmpt/bin

      - name: Extract Linux ARM64 Release
        uses: actions/download-artifact@v4
        continue-on-error: ${{ env.ACT && 'true' || 'false' }}
        with:
          name: bin-linux-arm64-Release
          path: ${{ github.workspace }}/addons/godot-openmpt/bin

      - name: Extract Windows Release
        uses: actions/download-artifact@v4
        continue-on-error: ${{ env.ACT && 'true' || 'false' }}
        with:
          name: bin-windows-Release
          path: ${{ github.workspace }}/addons/godot-openmpt/bin

      - name: Package Output Addon Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/addons
          name: godot-openmpt-${{ github.repository_id }}-${{ github.sha }}
